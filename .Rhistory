install.packages("rgdal")
library(car)
scatter3d(x = sep.l, y = pet.l, z = sep.w, groups = iris$Species,
grid = FALSE, fit = "smooth")
library(geoR)
library(raster)
data(elevation)
r <- raster("/home/hr/r.tif")
df <- data.frame(elevation$coords[,1], elevation$coords[,2], elevation$data)
scatter3d(df,
grid = FALSE, fit = "smooth")
scatter3d(df$elevation.coords...1., df$elevation.coords...2., df$elevation.data,
grid = FALSE, fit = "smooth")
scatter3d(df$elevation.coords...1., df$elevation.coords...2., df$elevation.data,
fit = "smooth")
scatter3d(df$elevation.coords...1., df$elevation.coords...2., df$elevation.data,
fit = "smooth")
scatter3d(df$elevation.coords...1., df$elevation.coords...2., df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "")
plot(elevation)
scatter3d(df$elevation.coords...1., df$elevation.coords...2., df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "")
?scatter3d
scatter3d(df$elevation.coords...1., df$elevation.coords...2., df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.ticks = F)
scatter3d(df$elevation.coords...1., df$elevation.coords...2., df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.ticks = F)
scatter3d(x = df$elevation.coords...1., y = df$elevation.coords...2., z = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.ticks = F)
scatter3d(x = df$elevation.coords...1., y = df$elevation.coords...2., z = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.ticks = F)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.ticks = F)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis=F)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", ellipsoid = T)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", level = 0.6)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", axis = FALSE)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", label.tick.marks = FALSE)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", highlight.3d = T)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white", surface.col = "blue")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white", surface.col = "red")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white", neg.res.col = "red")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white", neg.res.col = "red", residuals = T)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white", fill = T)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white", fill = T, cex.points = 0.5)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white", surf = list(x = df$elevation.coords...1., y = df$elevation.coords...2., z = df$elevation.data,)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white", surf = list(x = df$elevation.coords...1., y = df$elevation.coords...2., z = df$elevation.data)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white", surf = list(x = df$elevation.coords...1., y = df$elevation.coords...2., z = df$elevation.data)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data,
fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white", surf = list(x = df$elevation.coords...1., y = df$elevation.coords...2., z = df$elevation.data))
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white", surf = list(x = df$elevation.coords...1., y = df$elevation.coords...2., z = df$elevation.data))
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, fit = "smooth", xlab = "", ylab = "", zlab = "", axis.col = "white", surf = list(x = x.pred, y = y.pred, z = z.pred))
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", surf = list(x = x.pred, y = y.pred, z = z.pred, facets = NA, fit = "smooth"))
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = list(c(0, 1), c("tan", "blue")))
summary(elevation$data)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = list(c(690, 790), c("tan", "blue")))
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = list(c(0, 1), c("tan", "blue")))
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = list( c("tan", "blue")))
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = list( c("red", "blue")))
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = c("red", "blue"))
library(RColorBrewer)
pal <- brewer.pal(9, "RdBu")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = pal
)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = pal)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = "yellow")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = "blue3")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = "blue3", asp = 2)
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = "blue3", asp = 2, point.col = "yellow")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = "blue3", asp = 2, point.col = "red")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = "blue3", asp = 2, point.col = "white")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = "blue3", asp = 2, point.col = "black")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = "blue3", asp = 2, point.col = "orange")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = "blue3", asp = 2, point.col = "white")
scatter3d(x = df$elevation.coords...1., z = df$elevation.coords...2., y = df$elevation.data, xlab = "", ylab = "", zlab = "", axis.col = "white", fit = "smooth", surface.col = "blue3", asp = 2, point.col = "yellow")
setwd("/home/hr/geostat_beta_analitica/")
# Chernobyl
# Importando os dados
chernobyl <- read.csv("1_Spatial_dataset.csv")
clear
clear()
# Chernobyl
# Importando os dados
chernobyl <- read.csv("1_Spatial_dataset.csv")
names(chernobyl)
# Transformando em geodata
require(geoR)
cs137 <- as.geodata(chernobyl, coords.col = 4:3, data.col = 16)
# Primeira observação
plot(cs137)
# Transformando para escala logaritmica
cs137$data <- log(cs137$data)
plot(cs137)
# variograma
v <- variog(cs137)
plot(v)
# eye-fitting
ef <- eyefit(v)
ef
# ols
ols <- variofit(v, ini = c(4,1.89))
ols
points(cs137)
# grid de prediçao
pred.grid <- expand.grid(seq(26,31, l = 180), seq(49, 52, l = 108))
# Prediçao
kc.ols <- krige.conv(cs137, loc = pred.grid, krige = krige.control(obj.model = ols))
# visualizando
require(RColorBrewer)
pal <- brewer.pal(5, "Reds")
image(kc.ols, col=pal, x.leg = c(51,51.6), y.leg = c(29.6,29.7))
# Epidemia - loa loa
# Importando os dados e criando um índice
loa <- read.table("loaloa.txt")
loa$index <- loa$V4/loa$V3
loa
loa <- as.geodata(loa, coords.col = 1:2, data.col = 8)
# Primeira visualizacao
plot(loa)
points(loa)
bin1 <- variog(loa)
plot(bin1)
# eye-fitting
ef <- eyefit(bin1)
ef
# máxima verossimilhança
ml2 <- likfit(loa, ini = c(0.08, 4.44), nugget = 0.01, kappa = 2.16, cov.model = 'matern')
summary(ml)
# máxima verossimilhança
ml <- likfit(loa, ini = c(0.08, 4.44), nugget = 0.01, kappa = 2.16, cov.model = 'matern')
summary(ml)
plot(loa)
# Predicao
pred.grid2 <- expand.grid(seq(8,15, l = 112), seq(3, 7, l = 64))
kc.ml <- krige.conv(loa, loc = pred.grid2, krige = krige.control(obj.model = ml2))
pal <- brewer.pal(5, "Greys")
image(kc.ml, x.leg=c(9,14), y.leg=c(2,2.5), col=pal)
summary(kc.ml$predict)
# Simulações condicionais
prob.grid3 <- expand.grid(seq(8,15, l = 56), seq(3, 7, l = 32))
kc.prob3 <- krige.conv(loa, loc = prob.grid3, krige = krige.control(obj.model = ml2),
output = output.control(simulations = TRUE, n.pred=1000,
quantile=c(0.10, 0.25, 0.5, 0.75, 0.90),
threshold = 0.3))#atenção ao threshold
#suponha agora que definimos como regiao de alto risco as que possuem prob > 0.6 de estar acima de 0.3
p03 <- apply(kc.prob3$simulations, 1, function(x) mean(x>0.3))
p03.alto <- ifelse(p03 > 0.6, 0, 1)
image(kc.prob3, val=p03.alto, col=c(1,0))
# agora definindo 5 niveis de risco em função da probabilidade
par(mfrow=c(1,1))
image(kc.prob3, val=p03, breaks=seq(0, 1, by=0.2),
col=pal, x.leg = c(9,14), y.leg = c(2, 2.5), main = 'Prob. of disease index being higher than 0.3')
